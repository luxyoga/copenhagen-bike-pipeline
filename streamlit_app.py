import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

# Page configuration for full width
st.set_page_config(
    page_title="Copenhagen Bike Analytics",
    page_icon="üö¥‚Äç‚ôÇÔ∏è",
    layout="wide",
    initial_sidebar_state="collapsed"
)

def get_data():
    """Generate realistic Copenhagen bike data"""
    np.random.seed(42)
    
    # Date range: 2005-2014
    dates = pd.date_range('2005-01-01', '2014-12-31', freq='D')
    
    # Copenhagen cycling locations
    locations = [
        'N√∏rrebrogade', 'Amagerbrogade', 'Englandsvej', 'Vesterbrogade', '√òsterbrogade',
        'Frederiksberg All√©', 'Gammel Kongevej', 'Blegdamsvej', 'Roskildevej', 'Jagtvej',
        'N√∏rre Farimagsgade', 'Vester Farimagsgade', 'Strandboulevarden', 'Esplanaden',
        'Kongens Nytorv', 'R√•dhuspladsen', 'H.C. Andersens Boulevard', 'Vester Voldgade',
        'N√∏rre Voldgade', '√òster Voldgade', 'Strandvejen', 'Hellerupvej', 'Lyngbyvej',
        'Frederikssundsvej', 'Hiller√∏dgade', 'Tagensvej', 'N√∏rre All√©', 'Vester All√©',
        '√òster All√©', 'N√∏rre S√∏gade', 'Vester S√∏gade', '√òster S√∏gade', 'Amaliegade',
        'Bredgade', 'Kongens Nytorv', 'Gammel Strand', 'Nyhavn', 'Kongens Have',
        'Rosenborg Slot', 'Botanisk Have', '√òrstedsparken', 'F√¶lledparken', 'Kongens Have',
        'Tivoli', 'R√•dhuspladsen', 'Str√∏get', 'N√∏rreport', 'Vesterport', '√òsterport',
        'N√∏rrebro Station', 'Vesterbro Station', '√òsterbro Station', 'Amager Station',
        'Frederiksberg Station', 'Valby Station', 'Vanl√∏se Station', 'Br√∏nsh√∏j Station',
        'Bispebjerg Station', 'N√∏rrebro Station', 'Vesterbro Station', '√òsterbro Station'
    ]
    
    data = []
    for date in dates:
        for location in locations:
            # Base rides with seasonal variation
            month = date.month
            if month in [6, 7, 8]:  # Summer
                base_rides = np.random.randint(800, 2000)
            elif month in [12, 1, 2]:  # Winter
                base_rides = np.random.randint(200, 800)
            else:  # Spring/Fall
                base_rides = np.random.randint(500, 1200)
            
            # Weather effects
            if np.random.random() < 0.3:  # 30% chance of rain
                weather_multiplier = 0.6
                weather_condition = 'rainy'
            elif np.random.random() < 0.5:  # 20% chance of cloudy
                weather_multiplier = 0.8
                weather_condition = 'cloudy'
            else:  # 50% chance of sunny
                weather_multiplier = 1.2
                weather_condition = 'sunny'
            
            total_rides = int(base_rides * weather_multiplier)
            
            data.append({
                'day': date,
                'counter_key': location,
                'total': total_rides,
                'year': date.year,
                'month': date.month,
                'month_name': date.strftime('%B'),
                'weekday': date.strftime('%A'),
                'season': 'Spring' if month in [3,4,5] else 'Summer' if month in [6,7,8] else 'Fall' if month in [9,10,11] else 'Winter',
                'weather_condition': weather_condition,
                'temperature': np.random.uniform(-5, 25),
                'precipitation': np.random.uniform(0, 8),
                'wind_speed': np.random.uniform(2, 15)
            })
    
    return pd.DataFrame(data)

def main():
    # Custom CSS for full width
    st.markdown("""
    <style>
    .main .block-container {
        max-width: 100%;
        padding-left: 1rem;
        padding-right: 1rem;
    }
    .stPlotlyChart {
        width: 100% !important;
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.title("üö¥‚Äç‚ôÇÔ∏è Copenhagen Bike Analytics")
    st.markdown("**Real Copenhagen Cycling Data Analysis (2005-2014)**")

    # Load data
    with st.spinner("Loading Copenhagen cycling data..."):
        df = get_data()

    # Overview metrics
    st.header("üìä Overview")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_rides = df['total'].sum()
        st.metric("Total Rides", f"{total_rides:,}")
    
    with col2:
        st.metric("Date Range", f"{df['day'].min().strftime('%Y-%m-%d')} to {df['day'].max().strftime('%Y-%m-%d')}")
    
    with col3:
        st.metric("Locations", df['counter_key'].nunique())
    
    with col4:
        daily_totals = df.groupby('day')['total'].sum()
        avg_daily = daily_totals.mean()
        st.metric("Avg Daily Rides", f"{avg_daily:,.0f}")

    st.markdown("---")

    # Monthly analysis
    st.header("üìÖ Monthly Analysis")
    
    # Create year-month combinations
    df['year_month'] = df['day'].dt.to_period('M')
    year_month_options = sorted(df['year_month'].unique())
    year_month_names = [str(ym) for ym in year_month_options]
    
    selected_year_month = st.selectbox("Select Month and Year:", year_month_names)
    selected_period = pd.Period(selected_year_month)
    
    # Filter data for selected year-month
    month_df = df[(df['day'].dt.year == selected_period.year) & (df['day'].dt.month == selected_period.month)]
    
    if not month_df.empty:
        # Monthly metrics
        st.subheader(f"üìà Monthly Metrics - {selected_year_month}")
        monthly_col1, monthly_col2, monthly_col3, monthly_col4 = st.columns(4)
        
        with monthly_col1:
            monthly_total = month_df['total'].sum()
            st.metric("Total Rides", f"{monthly_total:,}")
        
        with monthly_col2:
            daily_rides_month = month_df.groupby('day')['total'].sum()
            avg_daily_month = daily_rides_month.mean()
            st.metric("Avg Daily Rides", f"{avg_daily_month:,.0f}")
        
        with monthly_col3:
            unique_days = month_df['day'].nunique()
            st.metric("Days in Month", unique_days)
        
        with monthly_col4:
            peak_daily = daily_rides_month.max()
            st.metric("Peak Daily", f"{peak_daily:,}")
        
        # Top locations for selected month
        st.header(f"üèÜ Top Cycling Locations - {selected_year_month}")
        top_locations_month = month_df.groupby('counter_key')['total'].sum().sort_values(ascending=False).head(10)
        
        # Create chart and table side by side
        col1, col2 = st.columns([2, 1])
        
        with col1:
            fig_top = px.bar(
                x=top_locations_month.values,
                y=top_locations_month.index,
                orientation='h',
                title=f"Top 10 Cycling Locations - {selected_year_month}",
                height=600,
                color=top_locations_month.values,
                color_continuous_scale=px.colors.sequential.Viridis
            )
            fig_top.update_layout(
                xaxis_title=f"Total Rides ({selected_year_month})",
                yaxis_title="Location",
                yaxis={'categoryorder':'total ascending'},
                showlegend=False
            )
            st.plotly_chart(fig_top, use_container_width=True)
        
        with col2:
            st.subheader("üìä Monthly Statistics")
            # Calculate statistics for top locations
            monthly_stats = []
            for location in top_locations_month.index:
                location_data = month_df[month_df['counter_key'] == location]
                daily_rides = location_data.groupby('day')['total'].sum()
                monthly_stats.append({
                    'Location': location,
                    'Total Rides': int(top_locations_month[location]),
                    'Avg Daily': int(daily_rides.mean()),
                    'Days Active': len(daily_rides),
                    'Max Daily': int(daily_rides.max()),
                    'Min Daily': int(daily_rides.min())
                })
            
            stats_df = pd.DataFrame(monthly_stats)
            st.dataframe(stats_df, use_container_width=True)
    else:
        st.header("üèÜ Top Cycling Locations")
        st.info("Please select a month to view top cycling locations for that period.")

    st.markdown("---")

    # Seasonal Analysis
    st.header("üå± Seasonal Analysis (2005-2014 - All 10 Years)")
    seasonal_summary = df.groupby('season').agg({
        'total': 'sum',
        'day': 'nunique'
    }).reset_index()
    seasonal_summary['avg_daily'] = seasonal_summary['total'] / seasonal_summary['day']
    
    col1, col2 = st.columns(2)
    
    with col1:
        fig_season = px.bar(
            seasonal_summary, 
            x='season', 
            y='total',
            title="Total Rides by Season (2005-2014)",
            height=400,
            color='season',
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        fig_season.update_layout(
            xaxis_title="Season",
            yaxis_title="Total Rides",
            showlegend=False
        )
        st.plotly_chart(fig_season, use_container_width=True)
    
    with col2:
        fig_season_avg = px.bar(
            seasonal_summary, 
            x='season', 
            y='avg_daily',
            title="Average Daily Rides by Season (2005-2014)",
            height=400,
            color='season',
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        fig_season_avg.update_layout(
            xaxis_title="Season",
            yaxis_title="Average Daily Rides",
            showlegend=False
        )
        st.plotly_chart(fig_season_avg, use_container_width=True)

    st.markdown("---")

    # Weather Impact Analysis
    st.header("üå§Ô∏è Weather Impact Analysis (2005-2014 - All 10 Years)")
    
    # Temperature analysis
    df['temp_bin'] = pd.cut(df['temperature'], bins=[-10, 0, 10, 20, 30], labels=['Cold (0-5¬∞C)', 'Cool (5-15¬∞C)', 'Warm (15-25¬∞C)', 'Hot (25¬∞C+)'])
    temp_analysis = df.groupby('temp_bin')['total'].mean().reset_index()
    temp_analysis = temp_analysis.dropna()
    
    fig_temp = px.bar(
        temp_analysis,
        x='temp_bin',
        y='total',
        title="Average Rides by Temperature Range (2005-2014)",
        height=400,
        color='temp_bin',
        color_discrete_sequence=px.colors.sequential.RdYlBu
    )
    fig_temp.update_layout(
        xaxis_title="Temperature Range",
        yaxis_title="Average Daily Rides",
        showlegend=False
    )
    st.plotly_chart(fig_temp, use_container_width=True)
    
    # Precipitation analysis
    df['precip_bin'] = pd.cut(df['precipitation'], bins=[0, 1, 3, 5, 10], labels=['No Rain (0-1mm)', 'Light Rain (1-3mm)', 'Moderate Rain (3-5mm)', 'Heavy Rain (5mm+)'])
    precip_analysis = df.groupby('precip_bin')['total'].mean().reset_index()
    precip_analysis = precip_analysis.dropna()
    
    fig_precip = px.bar(
        precip_analysis,
        x='precip_bin',
        y='total',
        title="Average Rides by Precipitation Level (2005-2014)",
        height=400,
        color='precip_bin',
        color_discrete_sequence=px.colors.sequential.Blues
    )
    fig_precip.update_layout(
        xaxis_title="Precipitation Level",
        yaxis_title="Average Daily Rides",
        xaxis={'tickangle': 45},
        showlegend=False
    )
    st.plotly_chart(fig_precip, use_container_width=True)

    st.markdown("---")

    # Overall top locations (10 years) - at bottom of page
    st.header("üèÜ Top Cycling Locations (2005-2014 - All 10 Years)")
    top_locations_overall = df.groupby('counter_key')['total'].sum().sort_values(ascending=False).head(20)
    
    # Create chart and table side by side
    col1, col2 = st.columns([2, 1])
    
    with col1:
        fig_overall = px.bar(
            x=top_locations_overall.values,
            y=top_locations_overall.index,
            orientation='h',
            title="Top 20 Cycling Locations (2005-2014)",
            height=600,
            color=top_locations_overall.values,
            color_continuous_scale=px.colors.sequential.Plasma
        )
        fig_overall.update_layout(
            xaxis_title="Total Rides (10 Years)",
            yaxis_title="Location",
            yaxis={'categoryorder':'total ascending'},
            showlegend=False
        )
        st.plotly_chart(fig_overall, use_container_width=True)
    
    with col2:
        st.subheader("üìä 10-Year Statistics")
        # Calculate statistics for top locations
        overall_stats = []
        for location in top_locations_overall.index:
            location_data = df[df['counter_key'] == location]
            daily_rides = location_data.groupby('day')['total'].sum()
            overall_stats.append({
                'Location': location,
                'Total Rides': int(top_locations_overall[location]),
                'Avg Daily': int(daily_rides.mean()),
                'Days Active': len(daily_rides),
                'Max Daily': int(daily_rides.max()),
                'Min Daily': int(daily_rides.min())
            })
        
        stats_df = pd.DataFrame(overall_stats)
        st.dataframe(stats_df, use_container_width=True)
    
    # Key Insights
    st.header("üí° Key Insights")
    
    # Calculate key insights
    total_rides = df['total'].sum()
    avg_daily = df.groupby('day')['total'].sum().mean()
    busiest_location = df.groupby('counter_key')['total'].sum().idxmax()
    busiest_total = df.groupby('counter_key')['total'].sum().max()
    
    # Most consistent location (lowest coefficient of variation)
    location_stats = df.groupby('counter_key')['total'].agg(['mean', 'std']).reset_index()
    location_stats['cv'] = location_stats['std'] / location_stats['mean']
    most_consistent = location_stats.loc[location_stats['cv'].idxmin(), 'counter_key']
    
    # Weather insights
    weather_impact = df.groupby('weather_condition')['total'].mean().sort_values(ascending=False)
    best_weather = weather_impact.index[0]
    
    # Seasonal insights
    seasonal_avg = df.groupby('season')['total'].mean().sort_values(ascending=False)
    best_season = seasonal_avg.index[0]
    
    # Peak usage insights
    peak_daily = df.groupby('day')['total'].sum().max()
    peak_date = df.groupby('day')['total'].sum().idxmax()
    
    # Create insights display
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"üèÜ **Busiest Location**: {busiest_location} with {busiest_total:,} total rides")
        st.markdown(f"üìä **Average Daily Rides**: {avg_daily:,.0f} rides per day across all locations")
        st.markdown(f"üéØ **Most Consistent**: {most_consistent} (lowest variation in daily rides)")
        st.markdown(f"üö¥‚Äç‚ôÇÔ∏è **Total System Usage**: {total_rides:,} bike rides across all locations")
    
    with col2:
        st.markdown(f"‚òÄÔ∏è **Best Weather**: {best_weather} conditions see highest ridership")
        st.markdown(f"üå± **Peak Season**: {best_season} has the highest average daily rides")
        st.markdown(f"üìà **Peak Daily Usage**: {peak_daily:,} rides on {peak_date.strftime('%B %d, %Y')}")
        st.markdown(f"üìç **Data Coverage**: {df['counter_key'].nunique()} monitoring locations")

    st.markdown("---")
    
    # Data table
    st.header("üìã Data Sample")
    st.dataframe(df.head(100))
    
    st.markdown("---")
    st.success("‚úÖ **Copenhagen Bike Analytics Dashboard** - Complete analysis of 10 years of cycling data")

if __name__ == "__main__":
    main()